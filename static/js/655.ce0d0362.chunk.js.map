{"version":3,"file":"static/js/655.ce0d0362.chunk.js","mappings":"iRAGaA,EAAmBC,EAAAA,GAAAA,IAAH,4DAKhBC,EAAgBD,EAAAA,GAAAA,IAAH,gDAIbE,EAAcF,EAAAA,GAAAA,GAAH,0CAIXG,GAAUH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,qIASPK,EAAcL,EAAAA,GAAAA,GAAH,0C,SCmExB,EA/EqB,WAAO,IAAD,EACzB,GAAwCM,EAAAA,EAAAA,UAAS,CAAC,GAAlD,eAAOC,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,SAAO,UAAAH,EAASI,aAAT,eAAgBC,OAAQ,MAElDC,EAAAA,EAAAA,YAAU,WACR,KACEC,EAAAA,EAAAA,IAAcT,GAASU,MAAK,SAAAC,GAAG,OAAIZ,EAAgBY,EAApB,GAGhC,CAFC,MAAOC,GACPC,QAAQC,IAAIF,EACb,CACF,GAAE,CAACZ,IAEJ,IAAIe,EAAS,GAOb,OAFOA,EAHFjB,EAAakB,YAGL,0CAAsClB,EAAakB,aAD5D,iKAIF,UAACC,EAAA,EAAD,YACE,SAAC,KAAD,CAAMC,GAAId,EAAWe,QAArB,8BACEC,EAAAA,EAAAA,SAAQtB,KACR,iCACE,UAACR,EAAD,YACE,gBAAK+B,IAAKN,EAAQO,IAAI,SAASC,MAAM,WACrC,UAAC/B,EAAD,YACE,0BACGM,EAAa0B,MAEb1B,EAAa2B,eACZ,kBACEC,MAAO,CACLC,QAAS,WACTC,MAAO,oBAHX,cAMI9B,EAAa2B,aAAaI,MAAM,EAAG,GANvC,WAWJ,wCACeC,KAAKC,MAAkC,GAA5BjC,EAAakC,cAAqB,QAE5D,qCACA,uBAAIlC,EAAamC,YACjB,mCACA,uBACGnC,EAAaoC,OAAOC,OAAS,EAC1BrC,EAAaoC,OAAOE,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,MAClD,uCAIV,4BACE,oDACA,UAAC9C,EAAD,YACE,SAACG,EAAD,WACE,SAACF,EAAD,CAASwB,GAAG,OAAZ,qBAEF,SAACtB,EAAD,WACE,SAACF,EAAD,CAASwB,GAAG,UAAZ,2BAIJ,SAAC,EAAAsB,SAAD,WACE,SAAC,KAAD,cAOb,C","sources":["pages/movieDetails/MovieDetails.styled.js","pages/movieDetails/MovieDetails.js"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const MovieDetailsWrap = styled.div`\n  display: flex;\n  padding: 10px;\n`;\n\nexport const MovieTextWrap = styled.div`\n  padding: 100px 50px;\n`;\n\nexport const SubMenuList = styled.ul`\n  display: flex;\n`;\n\nexport const SubLink = styled(NavLink)`\n  font-size: 20px;\n  font-weight: 600;\n  color: #001a00;\n  &.active {\n    color: rgb(72, 136, 29);\n  }\n`;\n\nexport const SubMenuItem = styled.li`\n  padding: 10px;\n`;\n","import { Suspense, useEffect, useRef, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { getMoviesById } from 'services/Api';\nimport { isEmpty } from 'lodash';\nimport { PageWrap } from 'components/pageWrap/PageWrap';\nimport {\n  SubLink,\n  MovieDetailsWrap,\n  MovieTextWrap,\n  SubMenuList,\n  SubMenuItem,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const [movieDetails, setMovieDetails] = useState({});\n  const { movieId } = useParams();\n\n  const location = useLocation();\n  const goBackHref = useRef(location.state?.from || '/');\n\n  useEffect(() => {\n    try {\n      getMoviesById(movieId).then(res => setMovieDetails(res));\n    } catch (error) {\n      console.log(error);\n    }\n  }, [movieId]);\n\n  let source = '';\n\n  if (!movieDetails.poster_path) {\n    source =\n      'https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-38-picture-grey-c2ebdbb057f2a7614185931650f8cee23fa137b93812ccb132b9df511df1cfac.svg';\n  } else source = `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`;\n\n  return (\n    <PageWrap>\n      <Link to={goBackHref.current}>Go back ‚Üê</Link>\n      {!isEmpty(movieDetails) && (\n        <>\n          <MovieDetailsWrap>\n            <img src={source} alt=\"poster\" width=\"300px\" />\n            <MovieTextWrap>\n              <h1>\n                {movieDetails.title}\n\n                {movieDetails.release_date && (\n                  <span\n                    style={{\n                      padding: '0px 10px',\n                      color: 'rgb(72, 136, 29)',\n                    }}\n                  >\n                    ({movieDetails.release_date.slice(0, 4)})\n                  </span>\n                )}\n              </h1>\n\n              <p>\n                User score: {Math.round(movieDetails.vote_average * 10) + '%'}\n              </p>\n              <b>Overview</b>\n              <p>{movieDetails.overview}</p>\n              <b>Genres</b>\n              <p>\n                {movieDetails.genres.length > 0\n                  ? movieDetails.genres.map(genre => genre.name).join(', ')\n                  : 'No information about genres'}\n              </p>\n            </MovieTextWrap>\n          </MovieDetailsWrap>\n          <div>\n            <h2>Additional information</h2>\n            <SubMenuList>\n              <SubMenuItem>\n                <SubLink to=\"cast\">Cast</SubLink>\n              </SubMenuItem>\n              <SubMenuItem>\n                <SubLink to=\"reviews\">Reviews</SubLink>\n              </SubMenuItem>\n            </SubMenuList>\n\n            <Suspense>\n              <Outlet />\n            </Suspense>\n          </div>\n        </>\n      )}\n    </PageWrap>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["MovieDetailsWrap","styled","MovieTextWrap","SubMenuList","SubLink","NavLink","SubMenuItem","useState","movieDetails","setMovieDetails","movieId","useParams","location","useLocation","goBackHref","useRef","state","from","useEffect","getMoviesById","then","res","error","console","log","source","poster_path","PageWrap","to","current","isEmpty","src","alt","width","title","release_date","style","padding","color","slice","Math","round","vote_average","overview","genres","length","map","genre","name","join","Suspense"],"sourceRoot":""}